{"ast":null,"code":"import _objectSpread from \"/Users/nick/devedit/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doSendEmailVerification = () => this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n    });\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).get().then(snapshot => {\n          const dbUser = snapshot.data(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = {};\n          } // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.user = uid => this.db.doc(\"users/\".concat(uid));\n\n    this.users = () => this.db.collection(\"users\");\n\n    this.article = uid => this.db.doc(\"article/\".concat(uid));\n\n    this.articles = () => this.db.collection(\"article\");\n\n    this.comment = uid => this.db.doc(\"comments/\".concat(uid));\n\n    this.comments = () => this.db.collection(\"comments\");\n\n    this.replys = commentId => this.db.collection(\"comments/\".concat(commentId, \"/replys\"));\n\n    this.reply = (commentId, replyId) => this.db.collection(\"comments/\".concat(commentId, \"/replys/\").concat(replyId));\n\n    this.tag = uid => this.db.doc(\"tags/\".concat(uid));\n\n    this.tags = () => this.db.collection(\"tags\");\n\n    console.log(\"API KEY\", process.env.REACT_APP_API_KEY);\n    app.initializeApp(config);\n    /* Helper */\n\n    this.fieldValue = app.firestore.FieldValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n    /* Firebase APIs */\n\n    this.auth = app.auth();\n    this.db = app.firestore();\n  } // *** Auth API ***\n\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/nick/devedit/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doSendEmailVerification","currentUser","sendEmailVerification","url","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","doPasswordUpdate","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","get","then","snapshot","dbUser","data","roles","emailVerified","providerData","db","doc","users","collection","article","articles","comment","comments","replys","commentId","reply","replyId","tag","tags","console","log","initializeApp","fieldValue","firestore","FieldValue","emailAuthProvider","EmailAuthProvider"],"mappings":"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","sourcesContent":["import app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nclass Firebase {\n  constructor() {\n    console.log(\"API KEY\", process.env.REACT_APP_API_KEY);\n    app.initializeApp(config);\n\n    /* Helper */\n\n    this.fieldValue = app.firestore.FieldValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n\n    /* Firebase APIs */\n\n    this.auth = app.auth();\n    this.db = app.firestore();\n  }\n\n  // *** Auth API ***\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doSendEmailVerification = () =>\n    this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n    });\n\n  doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n  // *** Merge Auth and DB User API *** //\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid)\n          .get()\n          .then(snapshot => {\n            const dbUser = snapshot.data();\n\n            // default empty roles\n            if (!dbUser.roles) {\n              dbUser.roles = {};\n            }\n\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              providerData: authUser.providerData,\n              ...dbUser\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n  // *** User API ***\n\n  user = uid => this.db.doc(`users/${uid}`);\n\n  users = () => this.db.collection(\"users\");\n\n  // *** Article API ***\n\n  article = uid => this.db.doc(`article/${uid}`);\n\n  articles = () => this.db.collection(\"article\");\n\n  //*** Comments API ***\n\n  comment = uid => this.db.doc(`comments/${uid}`);\n\n  comments = () => this.db.collection(\"comments\");\n  //*** Reply API ***\n\n  // reply = uid => this.db.doc(`replies/${uid}`);\n\n  // replies = () => this.db.collection('replies')\n  //*** Reply API ***\n\n  replys = commentId => this.db.collection(`comments/${commentId}/replys`);\n  reply = (commentId, replyId) =>\n    this.db.collection(`comments/${commentId}/replys/${replyId}`);\n\n  //*** Tags API ***\n\n  tag = uid => this.db.doc(`tags/${uid}`);\n\n  tags = () => this.db.collection(\"tags\");\n}\n\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}