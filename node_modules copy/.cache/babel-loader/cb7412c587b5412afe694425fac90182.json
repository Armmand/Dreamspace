{"ast":null,"code":"var _jsxFileName = \"/Users/nick/devedit/src/components/Comments/comments.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { withFirebase } from \"../Firebase\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"recompose\";\nimport * as ROUTES from \"../../constants/routes\";\nimport { AuthUserContext } from \"../Session\";\nimport Singlecomment from \"../../components/Singlecomment\";\nimport ReplyComments from \"../../components/Replycomments\";\n\nconst moment = require(\"moment\");\n\nclass Comments extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = (e, authUser) => {\n      const _e$target = e.target,\n            name = _e$target.name,\n            value = _e$target.value;\n      this.setState({\n        [name]: value,\n        timeCreated: moment().format(\" MMMM DD, YYYY  --  hh:mm:ss A \"),\n        userId: authUser.uid\n      });\n    };\n\n    this.getSingleComment = id => {\n      this.props.firebase.comment(id).onSnapshot(snapshot => {\n        console.log('getting comment', snapshot.id); //  this.setState({childCommentId:snapshot.id})\n        // console.log(\"Articles loaded here yo!\", articles);\n        // console.log(\"childcommentID\",this.state.childCommentId)\n      });\n    };\n\n    this.handleSubmit = (e, authUser) => {\n      e.preventDefault();\n      this.props.onCreate(this.state); // this. props.refreshFunction(this.state)\n\n      this.setState({\n        comment: \"\"\n      });\n    };\n\n    this.state = {\n      timeCreated: \"\",\n      comment: \"\",\n      limit: 5,\n      userId: \"\",\n      childCommentId: \"\"\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          comment = _this$state.comment,\n          timeCreated = _this$state.timeCreated,\n          childCommentId = _this$state.childCommentId;\n    const _this$props = this.props,\n          comments = _this$props.comments,\n          articleId = _this$props.articleId,\n          commentId = _this$props.commentId,\n          parentCommentId = _this$props.parentCommentId; //  console.log(\"childCommentId in a comments\",childCommentId)\n    //console.log(\"comments\", comments);\n\n    return React.createElement(AuthUserContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, authUser => React.createElement(\"div\", {\n      className: \"card-comment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"replys\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), comments && comments.map((comment, index) => {\n      //console.log('comment', comment)\n      const childComment = {};\n      /* if (!comment.commen) ){//if ther is no reposes for this comment just print the singlecomment only*/\n\n      if (comment.childCommentId) {\n        console.log(\"im a comment with a child \", Comment);\n        this.getSingleComment(comment.childCommentId);\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, React.createElement(Singlecomment, {\n          comment: comment,\n          key: index //limited={limited}\n          ,\n          timeCreated: timeCreated,\n          commentId: comment.commentId,\n          articleId: articleId,\n          onCreate: this.props.onCreate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }), React.createElement(ReplyComments, {\n          childCommentId: comment.childCommentId,\n          commentId: commentId,\n          timeCreated: timeCreated,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }));\n      } else {\n        //console.log('i have no children', comment)\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, React.createElement(Singlecomment, {\n          comment: comment,\n          key: index //limited={limited}\n          ,\n          timeCreated: timeCreated,\n          commentId: comment.commentId,\n          articleId: articleId,\n          onCreate: this.props.onCreate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }));\n      } //}\n\n    }), React.createElement(\"form\", {\n      className: \"card-addcomment\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"commentgrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: \"commentContent\",\n      id: \"comment\",\n      type: \"text\",\n      value: comment,\n      name: \"comment\",\n      placeholder: \"Write your comment here! \",\n      autoFocus: true,\n      onChange: e => this.handleChange(e, authUser),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"submit-btn\",\n      type: \"submit\",\n      value: \" Comment\",\n      disabled: !this.state.comment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Comment\")))));\n  }\n\n}\n\nexport default compose(withFirebase, withRouter)(Comments);","map":{"version":3,"sources":["/Users/nick/devedit/src/components/Comments/comments.js"],"names":["React","Component","Fragment","withFirebase","withRouter","compose","ROUTES","AuthUserContext","Singlecomment","ReplyComments","moment","require","Comments","constructor","props","handleChange","e","authUser","target","name","value","setState","timeCreated","format","userId","uid","getSingleComment","id","firebase","comment","onSnapshot","snapshot","console","log","handleSubmit","preventDefault","onCreate","state","limit","childCommentId","render","comments","articleId","commentId","parentCommentId","map","index","childComment","Comment"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { withFirebase } from \"../Firebase\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"recompose\";\nimport * as ROUTES from \"../../constants/routes\";\nimport { AuthUserContext } from \"../Session\";\nimport Singlecomment from \"../../components/Singlecomment\";\nimport ReplyComments from \"../../components/Replycomments\";\nconst moment = require(\"moment\");\n\nclass Comments extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeCreated: \"\",\n      comment: \"\",\n      limit: 5,\n      userId: \"\",\n      childCommentId:\"\"\n    };\n  }\n  \n  \n  handleChange = (e, authUser) => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n      timeCreated: moment().format(` MMMM DD, YYYY  --  hh:mm:ss A `),\n      userId: authUser.uid\n    });\n  };\n\n  getSingleComment = id => {\n    this.props.firebase.comment(id).onSnapshot(snapshot => {\n      console.log('getting comment', snapshot.id)\n    //  this.setState({childCommentId:snapshot.id})\n    // console.log(\"Articles loaded here yo!\", articles);\n   // console.log(\"childcommentID\",this.state.childCommentId)\n    });\n  };\n\n  handleSubmit = (e, authUser) => {\n    e.preventDefault();\n\n    this.props.onCreate(this.state);\n  // this. props.refreshFunction(this.state)\n    this.setState({\n      comment: \"\"\n      \n    });\n  };\n\n  render() {\n    const { comment, timeCreated , childCommentId,} = this.state;\n    const {\n      comments,\n      articleId,\n      commentId,\n     \n      parentCommentId\n    } = this.props;\n  //  console.log(\"childCommentId in a comments\",childCommentId)\n    //console.log(\"comments\", comments);\n    return (\n      <AuthUserContext.Consumer>\n        {authUser => (\n          <div className=\"card-comment\">\n            <br />\n            <p>replys</p>\n            <hr />\n\n            {comments &&\n              comments.map((comment, index) => {\n                //console.log('comment', comment)\n                const childComment = {};\n                /* if (!comment.commen) ){//if ther is no reposes for this comment just print the singlecomment only*/\n                if (comment.childCommentId) {\n                 console.log(\"im a comment with a child \", Comment);\n                  this.getSingleComment(comment.childCommentId);\n                  return (\n                    <div>\n                      <Singlecomment\n                        comment={comment}\n                        key={index}\n                        //limited={limited}\n                        timeCreated={timeCreated}\n                       commentId={comment.commentId}\n                       articleId={articleId}\n                       onCreate={this.props.onCreate}\n                      />\n                      <ReplyComments\n                        \n                        childCommentId={comment.childCommentId}                        \n                        commentId={commentId}\n                        timeCreated={timeCreated}\n                      />\n                    </div>\n                  );\n                } else {\n                  //console.log('i have no children', comment)\n                  return (\n                    <Fragment>\n                      <Singlecomment\n                        comment={comment}\n                        key={index}\n                        //limited={limited}\n                        timeCreated={timeCreated}\n                        commentId={comment.commentId}\n                        articleId={articleId}\n                        onCreate={this.props.onCreate}\n                      />\n                    </Fragment>\n                  );\n                }\n                //}\n              })}\n\n            <form className=\"card-addcomment\" onSubmit={this.handleSubmit}>\n              <div className=\"commentgrid\">\n                <textarea\n                  className=\"commentContent\"\n                  id=\"comment\"\n                  type=\"text\"\n                  value={comment}\n                  name=\"comment\"\n                  placeholder=\"Write your comment here! \"\n                  autoFocus={true}\n                  onChange={e => this.handleChange(e, authUser)}\n                ></textarea>\n\n                <button\n                  className=\"submit-btn\"\n                  type=\"submit\"\n                  value=\" Comment\"\n                  disabled={!this.state.comment}\n                >\n                  Comment\n                </button>\n              </div>\n            </form>\n          </div>\n        )}\n      </AuthUserContext.Consumer>\n    );\n  }\n}\n\nexport default compose(withFirebase, withRouter)(Comments);\n"]},"metadata":{},"sourceType":"module"}