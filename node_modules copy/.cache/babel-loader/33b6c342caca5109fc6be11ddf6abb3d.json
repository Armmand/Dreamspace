{"ast":null,"code":"import _objectSpread from \"/Users/nick/devedit/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nclass Firebase {\n  constructor() {\n    this.doSignInWithGoogle = () => this.auth.signInWithPopup(this.googleProvider);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doSendEmailVerification = () => this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n    });\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).get().then(snapshot => {\n          const dbUser = snapshot.data(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = {};\n          }\n          /*authUser.providerData.forEach(function (profile) {\n              //onsole.log(\"Sign-in provider: \" + profile.providerId);\n               //nsole.log(\"  Provider-specific UID: \" + profile.uid);\n               console.log(\"  Name: \" + profile.displayName);\n              //onsole.log(\"  Email: \" + profile.email);\n               console.log(\"  Photo URL: \" + profile.photoURL);\n           });*/\n          // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData,\n            photoUrl: authUser.photoURL\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.user = uid => this.db.doc(\"users/\".concat(uid));\n\n    this.users = () => this.db.collection(\"users\");\n\n    this.article = uid => this.db.doc(\"article/\".concat(uid));\n\n    this.articles = () => this.db.collection(\"article\");\n\n    this.comment = uid => this.db.doc(\"comments/\".concat(uid));\n\n    this.comments = () => this.db.collection(\"comments\");\n\n    this.replys = commentId => this.db.collection(\"comments/\".concat(commentId, \"/replys\"));\n\n    this.reply = (commentId, replyId) => this.db.collection(\"comments/\".concat(commentId, \"/replys/\").concat(replyId));\n\n    this.tag = uid => this.db.doc(\"tags/\".concat(uid));\n\n    this.tags = () => this.db.collection(\"tags\");\n\n    console.log(\"API KEY\", process.env.REACT_APP_API_KEY);\n    app.initializeApp(config);\n    /* Helper */\n\n    this.fieldValue = app.firestore.FieldValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n    /* Social Sign In Method Provider */\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    /* Firebase APIs */\n\n    this.auth = app.auth();\n    this.db = app.firestore();\n  } // *** Auth API ***\n  // doCreateUserWithEmailAndPassword = (email, password) =>\n  // this.auth.createUserWithEmailAndPassword(email, password);\n  //doSignInWithEmailAndPassword = (email, password) =>\n  // this.auth.signInWithEmailAndPassword(email, password);\n  //doSignInWithGoogle = () =>\n  // this.googleProvider = new app.auth.GoogleAuthProvider();\n\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/nick/devedit/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","Firebase","constructor","doSignInWithGoogle","auth","signInWithPopup","googleProvider","doSignOut","signOut","doPasswordReset","email","sendPasswordResetEmail","doSendEmailVerification","currentUser","sendEmailVerification","url","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","doPasswordUpdate","password","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","get","then","snapshot","dbUser","data","roles","emailVerified","providerData","photoUrl","photoURL","db","doc","users","collection","article","articles","comment","comments","replys","commentId","reply","replyId","tag","tags","console","log","initializeApp","fieldValue","firestore","FieldValue","emailAuthProvider","EmailAuthProvider","GoogleAuthProvider"],"mappings":"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","sourcesContent":["import app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nclass Firebase {\n  constructor() {\n    console.log(\"API KEY\", process.env.REACT_APP_API_KEY);\n      app.initializeApp(config);\n\n\n      \n\n    /* Helper */\n\n    this.fieldValue = app.firestore.FieldValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n\n      /* Social Sign In Method Provider */\n      this.googleProvider = new app.auth.GoogleAuthProvider();\n    /* Firebase APIs */\n\n    this.auth = app.auth();\n    this.db = app.firestore();\n  }\n\n  // *** Auth API ***\n\n // doCreateUserWithEmailAndPassword = (email, password) =>\n   // this.auth.createUserWithEmailAndPassword(email, password);\n\n  //doSignInWithEmailAndPassword = (email, password) =>\n   // this.auth.signInWithEmailAndPassword(email, password);\n    //doSignInWithGoogle = () =>\n    // this.googleProvider = new app.auth.GoogleAuthProvider();\n\n   \n\n\n\n    doSignInWithGoogle = () =>\n    this.auth.signInWithPopup(this.googleProvider);\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doSendEmailVerification = () =>\n    this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n    });\n\n    doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n\n          \n  // *** Merge Auth and DB User API *** //\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid)\n          .get()\n          .then(snapshot => {\n            const dbUser = snapshot.data();\n\n            // default empty roles\n            if (!dbUser.roles) {\n              dbUser.roles = {};\n              }\n             /*authUser.providerData.forEach(function (profile) {\n                 //onsole.log(\"Sign-in provider: \" + profile.providerId);\n                  //nsole.log(\"  Provider-specific UID: \" + profile.uid);\n                  console.log(\"  Name: \" + profile.displayName);\n                 //onsole.log(\"  Email: \" + profile.email);\n                  console.log(\"  Photo URL: \" + profile.photoURL);\n              });*/\n      \n             \n          \n\n\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              providerData: authUser.providerData,\n              photoUrl: authUser.photoURL,\n              ...dbUser\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n    \n  // *** User API ***\n\n  user = uid => this.db.doc(`users/${uid}`);\n\n  users = () => this.db.collection(\"users\");\n\n  // *** Article API ***\n\n  article = uid => this.db.doc(`article/${uid}`);\n\n  articles = () => this.db.collection(\"article\");\n\n  //*** Comments API ***\n\n  comment = uid => this.db.doc(`comments/${uid}`);\n\n  comments = () => this.db.collection(\"comments\");\n  //*** Reply API ***\n\n  // reply = uid => this.db.doc(`replies/${uid}`);\n\n  // replies = () => this.db.collection('replies')\n  //*** Reply API ***\n\n  replys = commentId => this.db.collection(`comments/${commentId}/replys`);\n  reply = (commentId, replyId) =>\n    this.db.collection(`comments/${commentId}/replys/${replyId}`);\n\n  //*** Tags API ***\n\n  tag = uid => this.db.doc(`tags/${uid}`);\n\n  tags = () => this.db.collection(\"tags\");\n}\n\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}