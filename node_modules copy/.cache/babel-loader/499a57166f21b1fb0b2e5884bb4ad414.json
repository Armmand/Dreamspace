{"ast":null,"code":"import _objectSpread from \"/Users/nick/devedit/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport 'firebase/storage';\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n}; //export const storage = firebase.storage();\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignInWithGoogle = () => this.auth.signInWithPopup(this.googleProvider);\n\n    this.doSignInWithFacebook = () => this.auth.signInWithPopup(this.facebookProvider);\n\n    this.doSignInWithGithub = () => this.auth.signInWithPopup(this.githubProvider);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doSendEmailVerification = () => this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n    });\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).get().then(snapshot => {\n          const dbUser = snapshot.data(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = {};\n          }\n          /*authUser.providerData.forEach(function (profile) {\n              //onsole.log(\"Sign-in provider: \" + profile.providerId);\n               //nsole.log(\"  Provider-specific UID: \" + profile.uid);\n               console.log(\"  Name: \" + profile.displayName);\n              //onsole.log(\"  Email: \" + profile.email);\n               console.log(\"  Photo URL: \" + profile.photoURL);\n           });*/\n          // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData,\n            photoUrl: authUser.photoURL,\n            education: authUser.education,\n            interest: authUser.interest,\n            aboutyouself: authUser.aboutyouself\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.user = uid => this.db.doc(\"users/\".concat(uid));\n\n    this.users = () => this.db.collection(\"users\");\n\n    this.article = uid => this.db.doc(\"article/\".concat(uid));\n\n    this.articles = () => this.db.collection(\"article\");\n\n    this.comment = uid => {\n      console.log('UID', uid);\n      return this.db.doc(\"comments/\".concat(uid));\n    };\n\n    this.comments = () => this.db.collection(\"comments\");\n\n    this.replys = commentId => this.db.collection(\"comments/\".concat(commentId, \"/replys\"));\n\n    this.reply = (commentId, replyId) => this.db.collection(\"comments/\".concat(commentId, \"/replys/\").concat(replyId));\n\n    this.tag = uid => this.db.doc(\"tags/\".concat(uid));\n\n    this.tags = () => this.db.collection(\"tags\");\n\n    console.log(\"API KEY\", process.env.REACT_APP_API_KEY);\n    app.initializeApp(config);\n    /* Helper */\n\n    this.fieldValue = app.firestore.FieldValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n    /* Social Sign In Method Provider */\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.githubProvider = new app.auth.GithubAuthProvider();\n    /* Firebase APIs */\n\n    this.auth = app.auth();\n    this.db = app.firestore();\n  } // *** Auth API ***\n\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/nick/devedit/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignInWithFacebook","facebookProvider","doSignInWithGithub","githubProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doSendEmailVerification","currentUser","sendEmailVerification","url","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","doPasswordUpdate","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","get","then","snapshot","dbUser","data","roles","emailVerified","providerData","photoUrl","photoURL","education","interest","aboutyouself","db","doc","users","collection","article","articles","comment","console","log","comments","replys","commentId","reply","replyId","tag","tags","initializeApp","fieldValue","firestore","FieldValue","emailAuthProvider","EmailAuthProvider","GoogleAuthProvider","FacebookAuthProvider","GithubAuthProvider"],"mappings":"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","sourcesContent":["import app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport 'firebase/storage';\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n//export const storage = firebase.storage();\nclass Firebase {\n  constructor() {\n    console.log(\"API KEY\", process.env.REACT_APP_API_KEY);\n      app.initializeApp(config);\n\n\n      \n\n    /* Helper */\n    this.fieldValue = app.firestore.FieldValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n\n      /* Social Sign In Method Provider */\n      this.googleProvider = new app.auth.GoogleAuthProvider();\n      this.facebookProvider = new app.auth.FacebookAuthProvider();\n      this.githubProvider = new app.auth.GithubAuthProvider();\n    /* Firebase APIs */\n    this.auth = app.auth();\n    this.db = app.firestore();\n  }\n  // *** Auth API ***\n doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n    \n    doSignInWithGoogle = () =>\n        this.auth.signInWithPopup(this.googleProvider);\n     doSignInWithFacebook = () =>\n        this.auth.signInWithPopup(this.facebookProvider);\n    doSignInWithGithub = () =>\n        this.auth.signInWithPopup(this.githubProvider);\n\n  doSignOut = () => this.auth.signOut();\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n  doSendEmailVerification = () =>\n    this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n    });\n\n    doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n\n    \n          \n  // *** Merge Auth and DB User API *** //\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid)\n          .get()\n          .then(snapshot => {\n            const dbUser = snapshot.data();\n            // default empty roles\n           if (!dbUser.roles) {\n              dbUser.roles = {};\n              }\n             /*authUser.providerData.forEach(function (profile) {\n                 //onsole.log(\"Sign-in provider: \" + profile.providerId);\n                  //nsole.log(\"  Provider-specific UID: \" + profile.uid);\n                  console.log(\"  Name: \" + profile.displayName);\n                 //onsole.log(\"  Email: \" + profile.email);\n                  console.log(\"  Photo URL: \" + profile.photoURL);\n              });*/\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              providerData: authUser.providerData,\n              photoUrl: authUser.photoURL,\n              education:authUser.education,\n              interest:authUser.interest,\n             aboutyouself:authUser.aboutyouself,\n              ...dbUser\n            };\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n  // *** User API ***\n  user = uid => this.db.doc(`users/${uid}`);\n  users = () => this.db.collection(\"users\");\n  // *** Article API ***\n  article = uid => this.db.doc(`article/${uid}`);\n  articles = () => this.db.collection(\"article\");\n  //*** Comments API ***\n  comment = (uid) => {\n    console.log('UID', uid)\n    return this.db.doc(`comments/${uid}`);\n  }\n  comments = () => this.db.collection(\"comments\");\n  //*** Reply API ***\n  // reply = uid => this.db.doc(`replies/${uid}`);\n  // replies = () => this.db.collection('replies')\n  //*** Reply API ***\n  replys = commentId => this.db.collection(`comments/${commentId}/replys`);\n  reply = (commentId, replyId) =>\n    this.db.collection(`comments/${commentId}/replys/${replyId}`);\n  //*** Tags API ***\n  tag = uid => this.db.doc(`tags/${uid}`);\n  tags = () => this.db.collection(\"tags\");\n}\nexport default Firebase; "]},"metadata":{},"sourceType":"module"}