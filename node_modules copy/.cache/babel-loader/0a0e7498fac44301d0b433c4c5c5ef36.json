{"ast":null,"code":"/*import React from \"react\";\nimport { compose } from \"recompose\";\nimport {\n  AuthUserContext,\n  withAuthorization,\n  withEmailVerification\n} from \"../../components/Session\";\nimport { withFirebase } from \"../../components/Firebase\";\nimport ReplyComment from \"../ReplyComment\";\nimport AddReplys from \"../AddReplys\";\nconst moment = require(\"moment\");\nclass Comment extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comments: [],\n      showAll: false,\n      commentId: \"\",\n      replys: [],\n      timeCreated: \"\",\n      totallReplys: 0,\n      sortType:'asc',\n      replysID:\"\",\n      username:\"\"\n    };\n  }\n\n  componentDidMount = () => {\n    const commentId = this.props.commentId;\n    //console.log(\"this is commentId\", commentId);\n    this.unsubscribe = this.props.firebase\n      .replys(commentId)\n      //.where(\"commentId\", \"==\", commentId)\n      .onSnapshot(snapshot => {\n        const Replys = [];\n        let replysId = \"\";\n        snapshot.forEach(doc => {\n         \n          const data = doc.data();\n         // console.log(\"doc data\",data)\n          replysId = doc.id;\n          data.replysId = replysId;\n          Replys.push(data);\n        });\n       //console.log(\"this is my replysID using spesific commentId\", replysId);\n        this.setState({ \n          replys: Replys,\n          replysId:replysId\n         });\n\n        const totallCountReplys = Replys.length;\n        //console.log(\"totalcountReplys\", totallCountReplys);\n        this.setState({ totallReplys: totallCountReplys });\n      });\n      let {comment}= this.props;\n      let autherId = comment.userId;\n      this.unsubscribe = this.props.firebase\n        .user(autherId)\n        .get()\n        .then(doc => {\n          // console.log(\"userdata\", doc.data())\n          let user = doc.data();\n          this.setState({ username: user.username });\n        });\n       \n       \n  };\n\n  showMore = () => this.setState({ showAll: true });\n  showLess = () => this.setState({ showAll: false });\n\n  render() {\n\n    const { comment, limited, timeCreated, commentId,userName ,} = this.props;\n    const { showAll,replys,sortType,replysId} = this.state;\n    let commentContent = comment.comment;\n    \n//console.log(\"Here is your  replysId\", replysId)\n\n    if(replys){\n      replys.sort((a,b) =>{\n       const  isReversed = (sortType === 'asc') ? 1 :-1;\n       return  isReversed * a.timeCreated.localeCompare(b.timeCreated)\n     })\n     //console.log(\"sortedComment\",sortedcomments)\n         }\n    if (comment.comment && comment.comment.length <= limited) {\n      // console.log(\"IF\", comment.comment, comment.comment.length);\n      return (\n        <AuthUserContext.Consumer>\n          {authUser => (\n            <div>\n              <div>\n                <div className=\"commentDisplay\">\n                  <p className=\"styleDisplay\">\n                  <i className=\"fa fa-user\"></i>{\" \"}\n                    posted By {this.state.username}\n                    {comment.timeCreated} <br />\n                    {comment.comment}{\" \"}\n                    \n                  </p>\n\n                  <div>\n                    <AddReplys commentId={comment.commentId} />\n\n                    <div>\n                      <ReplyComment\n                        replys={this.state.replys}\n                        timeCreated={timeCreated}\n                        commentID={commentId}\n                        comment={comment}\n                        totallReplys={this.state.totallReplys}\n                        replysId={replysId}\n                        \n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </AuthUserContext.Consumer>\n      );\n    } else {\n      //  console.log(\"ELSE\", comment.comment, comment.comment.length);\n\n      if (showAll) {\n        return (\n          <div className=\"card-comment\">\n            <div className=\"commentDisplay\">\n              <p className=\"styleDisplay\">\n                {comment.timeCreated} <br />\n                {comment.comment}\n                <a onClick={this.showLess} style={{ color: \"darkblue\" }}>\n                  Read less\n                </a>\n              </p>\n            </div>\n          </div>\n        );\n      }\n    }\n    //console.log(\"this is commentContent\",commentContent)\n    const toShow = commentContent.slice(0, limited) + \"....\";\n\n    if (toShow) {\n      return (\n        <div className=\"card-comment\">\n          <div className=\"commentDisplay \">\n            <p className=\"styleDisplay\">\n              {comment.timeCreated} <br />\n              {toShow}\n              <a onClick={this.showMore} style={{ color: \"darkblue\" }}>\n                {\" \"}\n                Read More{\" \"}\n              </a>\n            </p>\n            <br />\n          </div>\n        </div>\n      );\n    }\n  }\n}\nexport default compose(withFirebase)(Comment);*/","map":{"version":3,"sources":["/Users/nick/devedit/src/components/Comment/index.js"],"names":[],"mappings":"AAAA","sourcesContent":["/*import React from \"react\";\nimport { compose } from \"recompose\";\nimport {\n  AuthUserContext,\n  withAuthorization,\n  withEmailVerification\n} from \"../../components/Session\";\nimport { withFirebase } from \"../../components/Firebase\";\nimport ReplyComment from \"../ReplyComment\";\nimport AddReplys from \"../AddReplys\";\nconst moment = require(\"moment\");\nclass Comment extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comments: [],\n      showAll: false,\n      commentId: \"\",\n      replys: [],\n      timeCreated: \"\",\n      totallReplys: 0,\n      sortType:'asc',\n      replysID:\"\",\n      username:\"\"\n    };\n  }\n\n  componentDidMount = () => {\n    const commentId = this.props.commentId;\n    //console.log(\"this is commentId\", commentId);\n    this.unsubscribe = this.props.firebase\n      .replys(commentId)\n      //.where(\"commentId\", \"==\", commentId)\n      .onSnapshot(snapshot => {\n        const Replys = [];\n        let replysId = \"\";\n        snapshot.forEach(doc => {\n         \n          const data = doc.data();\n         // console.log(\"doc data\",data)\n          replysId = doc.id;\n          data.replysId = replysId;\n          Replys.push(data);\n        });\n       //console.log(\"this is my replysID using spesific commentId\", replysId);\n        this.setState({ \n          replys: Replys,\n          replysId:replysId\n         });\n\n        const totallCountReplys = Replys.length;\n        //console.log(\"totalcountReplys\", totallCountReplys);\n        this.setState({ totallReplys: totallCountReplys });\n      });\n      let {comment}= this.props;\n      let autherId = comment.userId;\n      this.unsubscribe = this.props.firebase\n        .user(autherId)\n        .get()\n        .then(doc => {\n          // console.log(\"userdata\", doc.data())\n          let user = doc.data();\n          this.setState({ username: user.username });\n        });\n       \n       \n  };\n\n  showMore = () => this.setState({ showAll: true });\n  showLess = () => this.setState({ showAll: false });\n\n  render() {\n\n    const { comment, limited, timeCreated, commentId,userName ,} = this.props;\n    const { showAll,replys,sortType,replysId} = this.state;\n    let commentContent = comment.comment;\n    \n//console.log(\"Here is your  replysId\", replysId)\n\n    if(replys){\n      replys.sort((a,b) =>{\n       const  isReversed = (sortType === 'asc') ? 1 :-1;\n       return  isReversed * a.timeCreated.localeCompare(b.timeCreated)\n     })\n     //console.log(\"sortedComment\",sortedcomments)\n         }\n    if (comment.comment && comment.comment.length <= limited) {\n      // console.log(\"IF\", comment.comment, comment.comment.length);\n      return (\n        <AuthUserContext.Consumer>\n          {authUser => (\n            <div>\n              <div>\n                <div className=\"commentDisplay\">\n                  <p className=\"styleDisplay\">\n                  <i className=\"fa fa-user\"></i>{\" \"}\n                    posted By {this.state.username}\n                    {comment.timeCreated} <br />\n                    {comment.comment}{\" \"}\n                    \n                  </p>\n\n                  <div>\n                    <AddReplys commentId={comment.commentId} />\n\n                    <div>\n                      <ReplyComment\n                        replys={this.state.replys}\n                        timeCreated={timeCreated}\n                        commentID={commentId}\n                        comment={comment}\n                        totallReplys={this.state.totallReplys}\n                        replysId={replysId}\n                        \n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </AuthUserContext.Consumer>\n      );\n    } else {\n      //  console.log(\"ELSE\", comment.comment, comment.comment.length);\n\n      if (showAll) {\n        return (\n          <div className=\"card-comment\">\n            <div className=\"commentDisplay\">\n              <p className=\"styleDisplay\">\n                {comment.timeCreated} <br />\n                {comment.comment}\n                <a onClick={this.showLess} style={{ color: \"darkblue\" }}>\n                  Read less\n                </a>\n              </p>\n            </div>\n          </div>\n        );\n      }\n    }\n    //console.log(\"this is commentContent\",commentContent)\n    const toShow = commentContent.slice(0, limited) + \"....\";\n\n    if (toShow) {\n      return (\n        <div className=\"card-comment\">\n          <div className=\"commentDisplay \">\n            <p className=\"styleDisplay\">\n              {comment.timeCreated} <br />\n              {toShow}\n              <a onClick={this.showMore} style={{ color: \"darkblue\" }}>\n                {\" \"}\n                Read More{\" \"}\n              </a>\n            </p>\n            <br />\n          </div>\n        </div>\n      );\n    }\n  }\n}\nexport default compose(withFirebase)(Comment);*/\n"]},"metadata":{},"sourceType":"module"}